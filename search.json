[{"path":"https://aravind-j.github.io/avial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"J. Aravind. Author, maintainer.","code":""},{"path":"https://aravind-j.github.io/avial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aravind, J. ().  avial: Mixed Bag R Functions. R package version 0.0.0.9000, https://aravind-j.github.io/avial/.","code":"@Manual{,   title = {avial: A Mixed Bag of R Functionss},   author = {J. Aravind},   note = {R package version 0.0.0.9000 https://aravind-j.github.io/avial/}, }"},{"path":[]},{"path":[]},{"path":"https://aravind-j.github.io/avial/index.html","id":"aravind-j","dir":"","previous_headings":"avial: A Mixed Bag of R Functions","what":"Aravind, J.","title":"A Mixed Bag of R Functions","text":"Division Germplasm Conservation, ICAR-National Bureau Plant Genetic Resources, New Delhi.","code":""},{"path":"https://aravind-j.github.io/avial/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"A Mixed Bag of R Functions","text":"bunch miscellaneous R functions primarly personal use.functions may migrated packages future required.","code":""},{"path":"https://aravind-j.github.io/avial/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Mixed Bag of R Functions","text":"development version can installed github follows:","code":"# Install development version from Github devtools::install_github(\"aravind-j/avial\")"},{"path":"https://aravind-j.github.io/avial/index.html","id":"whats-new","dir":"","previous_headings":"","what":"What’s new","title":"A Mixed Bag of R Functions","text":"know whats new version type:","code":"news(package='avial')"},{"path":"https://aravind-j.github.io/avial/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"A Mixed Bag of R Functions","text":"Github page Documentation website","code":""},{"path":"https://aravind-j.github.io/avial/index.html","id":"citing-avial","dir":"","previous_headings":"","what":"Citing avial","title":"A Mixed Bag of R Functions","text":"cite methods package use:","code":"citation(\"avial\") To cite the R package 'avial' in publications use:    Aravind, J. (2024).  avial: A Mixed Bag of R Functions. R package   version 0.0.0.9000, https://aravind-j.github.io/avial/.  A BibTeX entry for LaTeX users is    @Manual{,     title = {avial: A Mixed Bag of R Functions},     author = {J. Aravind},     year = {2024},     note = {R package version 0.0.0.9000 https://aravind-j.github.io/avial/},   }  This free and open-source software implements academic research by the authors and co-workers. If you use it, please support the project by citing the package."},{"path":"https://aravind-j.github.io/avial/reference/binw.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Bin Width for Plotting Histograms — binw","title":"Calculate the Bin Width for Plotting Histograms — binw","text":"Calculate Bin Width Plotting Histograms","code":""},{"path":"https://aravind-j.github.io/avial/reference/binw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Bin Width for Plotting Histograms — binw","text":"","code":"binw(x, method = c(\"fd\", \"scott\", \"sturges\"))"},{"path":"https://aravind-j.github.io/avial/reference/binw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Bin Width for Plotting Histograms — binw","text":"x numeric vector values histogram generated. method method compute number classes histogram.","code":""},{"path":"https://aravind-j.github.io/avial/reference/binw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Bin Width for Plotting Histograms — binw","text":"bin width.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/avial/reference/binw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Bin Width for Plotting Histograms — binw","text":"","code":"set.seed(1) x <- stats::rnorm(1111)  binw(x = x, method = \"fd\") #> [1] 0.2 binw(x = x, method = \"scott\") #> [1] 0.5 binw(x = x, method = \"sturges\") #> [1] 0.5"},{"path":"https://aravind-j.github.io/avial/reference/dnorm_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Add Normal Distribution Curve in ggplot2 histogram — dnorm_ggplot","title":"Function to Add Normal Distribution Curve in ggplot2 histogram — dnorm_ggplot","text":"Enhancement dnorm plot normal distribution bell curve overlay ggplot2 histograms according number records bin width.","code":""},{"path":"https://aravind-j.github.io/avial/reference/dnorm_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Add Normal Distribution Curve in ggplot2 histogram — dnorm_ggplot","text":"","code":"dnorm_ggplot(x, mean, sd, n, bw)"},{"path":"https://aravind-j.github.io/avial/reference/dnorm_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Add Normal Distribution Curve in ggplot2 histogram — dnorm_ggplot","text":"x vector values. mean vector means. sd vector standard deviations. n number records data points used plot histogram. bw bin width histogram.","code":""},{"path":"https://aravind-j.github.io/avial/reference/dnorm_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Add Normal Distribution Curve in ggplot2 histogram — dnorm_ggplot","text":"density normal distribution.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/avial/reference/dnorm_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to Add Normal Distribution Curve in ggplot2 histogram — dnorm_ggplot","text":"","code":"dnorm(0) * 25 == dnorm_ggplot(0, mean = 0, sd = 1, n = 5, bw = 5) #> [1] TRUE dnorm(1) * 21 == dnorm_ggplot(1, mean = 0, sd = 1, n = 7, bw = 3) #> [1] TRUE"},{"path":"https://aravind-j.github.io/avial/reference/groupwise_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Group-wise Bar Plots — groupwise_bar","title":"Plot Group-wise Bar Plots — groupwise_bar","text":"Plot Group-wise Bar Plots","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Group-wise Bar Plots — groupwise_bar","text":"","code":"groupwise_bar(   data,   group,   trait,   bar.border = TRUE,   bar.alpha = 0.8,   by = c(\"group\", \"trait\"),   relative.freq = FALSE,   subset = c(\"facet\", \"none\"),   na.rm = TRUE,   include.overall = TRUE,   background.bar = TRUE,   background.bar.alpha = 0.25,   show.counts = TRUE,   count.text.size = 3,   position = c(\"dodge\", \"stack\"),   ncol = NULL,   nrow = NULL )"},{"path":"https://aravind-j.github.io/avial/reference/groupwise_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Group-wise Bar Plots — groupwise_bar","text":"data data data frame object. data frame possess columns specifying group trait. group Name column specifying group character string. trait Name column specifying trait character string. bar.border logical. TRUE, bar border also plotted. Default TRUE. bar.alpha Alpha transparency group-wise bar plot. factor according bars grouped. Either \"group\" \"trait\". relative.freq logical. TRUE, relative frequency proportion plotted instead counts. Default FALSE. subset method subsetting plots according argument \"group\". Either \"facet\" getting plot using faceting ggplot2 \"list\" getting list plots. na.rm logical. TRUE, NA factor levels excluded plot. Default TRUE. include.overall logical. TRUE, overall total data also plotted. Default TRUE. background.bar logical. TRUE, overall data plotted background bar plot = \"group\", include.overall = TRUE, position = \"dodge\". Default TRUE. background.bar.alpha Alpha transparency background bar plot. show.counts logical. TRUE, group wise counts plotted text annotation. Default TRUE. count.text.size size count text annotation. position Bar position adjustment. Either \"dodge\" \"stack\". ncol Number columns subset = \"facet\". nrow Number rows subset = \"facet\".","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Group-wise Bar Plots — groupwise_bar","text":"group-wise bar plot ggplot2 plot grob list   ggplot2 plot grobs.","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Group-wise Bar Plots — groupwise_bar","text":"","code":"library(agridat) library(ggplot2) library(patchwork)  soydata <- australia.soybean  clrs <- c(\"#B2182B\", \"#2166AC\", \"#009E53\", \"#E69F00\", \"gray25\") clrs_dark <- colorspace::darken(clrs, amount = 0.2)  soydata$lodging <- cut(soydata$lodging,                        breaks = quantile(soydata$lodging, na.rm = TRUE),                        include.lowest = TRUE) levels(soydata$lodging) <- 1:4  # soydata[soydata$loc == \"Nambour\", ]$lodging <- NA # #soydata[soydata$lodging == 1, ]$lodging # soydata[!(is.na(soydata$lodging)) & soydata$lodging == 1, ]$lodging <- NA  # set.seed(123) # ind <- sample(1:nrow(soydata), size = nrow(soydata) * 0.1, replace = FALSE) # soydata[ind, ]$lodging <- NA  # Group-wise side-by-side bar plot with counts ----  outg_group_dodge_count <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 subset = \"none\", position = \"dodge\")  outg_group_dodge_count   outg_group_dodge_count +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_group_dodge_count_facet <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 subset = \"facet\", position = \"dodge\")  outg_group_dodge_count_facet   outg_group_dodge_count_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_group_dodge_count_list <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 subset = \"list\", position = \"dodge\")  wrap_plots(outg_group_dodge_count_list, nrow = 2, guides = \"collect\")   outg_group_dodge_count_list <-   lapply(seq_along(outg_group_dodge_count_list), function(i) {     outg_group_dodge_count_list[[i]] +       scale_fill_manual(values = clrs[i]) +       scale_colour_manual(values = clrs_dark[i])   }) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  wrap_plots(outg_group_dodge_count_list, nrow = 2, guides = \"collect\")   # Group-wise side-by-side bar plot with relative frequencies ----  outg_group_dodge_rfreq <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 relative.freq = TRUE,                 subset = \"none\", position = \"dodge\")  outg_group_dodge_rfreq   outg_group_dodge_rfreq +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_group_dodge_rfreq_facet <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 relative.freq = TRUE,                 subset = \"facet\", position = \"dodge\")  outg_group_dodge_rfreq_facet   outg_group_dodge_rfreq_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_group_dodge_rfreq_list <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 relative.freq = TRUE,                 subset = \"list\", position = \"dodge\")  wrap_plots(outg_group_dodge_rfreq_list, nrow = 2, guides = \"collect\")   outg_group_dodge_rfreq_list <-   lapply(seq_along(outg_group_dodge_rfreq_list), function(i) {     outg_group_dodge_rfreq_list[[i]] +       scale_fill_manual(values = clrs[i]) +       scale_colour_manual(values = clrs_dark[i])   }) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  wrap_plots(outg_group_dodge_rfreq_list, nrow = 2, guides = \"collect\")   # Group-wise stacked bar plot with counts ----  outg_group_stack_count <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 subset = \"none\", position = \"stack\")  outg_group_stack_count   outg_group_stack_count +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_group_stack_count_facet <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 subset = \"facet\", position = \"stack\")  outg_group_stack_count_facet   outg_group_stack_count_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_group_stack_count_list <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 subset = \"list\", position = \"stack\")  wrap_plots(outg_group_stack_count_list, nrow = 2, guides = \"collect\")   outg_group_stack_count_list <-   lapply(seq_along(outg_group_stack_count_list), function(i) {     outg_group_stack_count_list[[i]] +       scale_fill_manual(values = clrs) +       scale_colour_manual(values = clrs_dark)   })  wrap_plots(outg_group_stack_count_list, nrow = 2, guides = \"collect\")   # Group-wise stacked bar plot with relative frequencies ----  outg_group_stack_rfreq <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 relative.freq = TRUE,                 subset = \"none\", position = \"stack\")  outg_group_stack_rfreq   outg_group_stack_rfreq +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_group_stack_rfreq_facet <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 relative.freq = TRUE,                 subset = \"facet\", position = \"stack\")  outg_group_stack_rfreq_facet   outg_group_stack_rfreq_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_group_stack_rfreq_list <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"group\",                 relative.freq = TRUE,                 subset = \"list\", position = \"stack\")  wrap_plots(outg_group_stack_rfreq_list, nrow = 2, guides = \"collect\")   outg_group_stack_rfreq_list <-   lapply(seq_along(outg_group_stack_rfreq_list), function(i) {     outg_group_stack_rfreq_list[[i]] +       scale_fill_manual(values = clrs) +       scale_colour_manual(values = clrs_dark)   })  wrap_plots(outg_group_stack_rfreq_list, nrow = 2, guides = \"collect\")    # Trait-wise side-by-side bar plot with counts ----  outg_trait_dodge_count <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 subset = \"none\", position = \"dodge\")  outg_trait_dodge_count   outg_trait_dodge_count +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_trait_dodge_count_facet <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 subset = \"facet\", position = \"dodge\")  outg_trait_dodge_count_facet   outg_trait_dodge_count_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_trait_dodge_count_list <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 subset = \"list\", position = \"dodge\")  wrap_plots(outg_trait_dodge_count_list, nrow = 2, guides = \"collect\")   outg_trait_dodge_count_list <-   lapply(seq_along(outg_trait_dodge_count_list), function(i) {     outg_trait_dodge_count_list[[i]] +       scale_fill_manual(values = clrs[i]) +       scale_colour_manual(values = clrs_dark[i])   }) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  wrap_plots(outg_trait_dodge_count_list, nrow = 2, guides = \"collect\")   # Trait-wise side-by-side bar plot with relative frequencies ----  outg_trait_dodge_rfreq <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 relative.freq = TRUE,                 subset = \"none\", position = \"dodge\")  outg_trait_dodge_rfreq   outg_trait_dodge_rfreq +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_trait_dodge_rfreq_facet <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 relative.freq = TRUE,                 subset = \"facet\", position = \"dodge\")  outg_trait_dodge_rfreq_facet   outg_trait_dodge_rfreq_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_trait_dodge_rfreq_list <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 relative.freq = TRUE,                 subset = \"list\", position = \"dodge\")  wrap_plots(outg_trait_dodge_rfreq_list, nrow = 2, guides = \"collect\")   outg_trait_dodge_rfreq_list <-   lapply(seq_along(outg_trait_dodge_rfreq_list), function(i) {     outg_trait_dodge_rfreq_list[[i]] +       scale_fill_manual(values = clrs[i]) +       scale_colour_manual(values = clrs_dark[i])   }) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  wrap_plots(outg_trait_dodge_rfreq_list, nrow = 2, guides = \"collect\")   # Trait-wise stacked bar plot with counts ----  outg_trait_stack_count <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 subset = \"none\", position = \"stack\")  outg_trait_stack_count   outg_trait_stack_count +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_trait_stack_count_facet <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 subset = \"facet\", position = \"stack\")  outg_trait_stack_count_facet   outg_trait_stack_count_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_trait_stack_count_list <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 subset = \"list\", position = \"stack\")  wrap_plots(outg_trait_stack_count_list, nrow = 2, guides = \"collect\")   outg_trait_stack_count_list <-   lapply(seq_along(outg_trait_stack_count_list), function(i) {     outg_trait_stack_count_list[[i]] +       scale_fill_manual(values = clrs) +       scale_colour_manual(values = clrs_dark)   })  wrap_plots(outg_trait_stack_count_list, nrow = 2, guides = \"collect\")   # Trait-wise stacked bar plot with relative frequencies ----  outg_trait_stack_rfreq <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 relative.freq = TRUE,                 subset = \"none\", position = \"stack\")  outg_trait_stack_rfreq   outg_trait_stack_rfreq +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_trait_stack_rfreq_facet <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 relative.freq = TRUE,                 subset = \"facet\", position = \"stack\")  outg_trait_stack_rfreq_facet   outg_trait_stack_rfreq_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark)   outg_trait_stack_rfreq_list <-   groupwise_bar(data = soydata, group = \"loc\", trait = \"lodging\",                 bar.border = TRUE, by = \"trait\",                 relative.freq = TRUE,                 subset = \"list\", position = \"stack\")  wrap_plots(outg_trait_stack_rfreq_list, nrow = 2, guides = \"collect\")   outg_trait_stack_rfreq_list <-   lapply(seq_along(outg_trait_stack_rfreq_list), function(i) {     outg_trait_stack_rfreq_list[[i]] +       scale_fill_manual(values = clrs) +       scale_colour_manual(values = clrs_dark)   })  wrap_plots(outg_trait_stack_rfreq_list, nrow = 2, guides = \"collect\")"},{"path":"https://aravind-j.github.io/avial/reference/groupwise_dumbell.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Group-wise Dumbell Plots — groupwise_dumbell","title":"Plot Group-wise Dumbell Plots — groupwise_dumbell","text":"Plot Group-wise Dumbell Plots","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_dumbell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Group-wise Dumbell Plots — groupwise_dumbell","text":"","code":"groupwise_dumbell(   data,   group,   trait,   genotype,   subset = c(\"facet\", \"list\", \"none\"),   diff.sort = c(\"none\", \"ascending\", \"descending\"),   segment = TRUE,   segment.size = 3,   segment.colour = \"gray\",   segment.alpha = 0.5,   point.size = 3,   point.alpha = 0.8,   error.bar = TRUE,   error.bar.width = 0.1,   ncol = NULL,   nrow = NULL )"},{"path":"https://aravind-j.github.io/avial/reference/groupwise_dumbell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Group-wise Dumbell Plots — groupwise_dumbell","text":"data data data frame object. data frame possess columns specifying group trait. group Name column specifying group character string. trait Name column specifying trait character string. genotype Name column specifying genotype character string. subset method subsetting plots according argument \"group\". Either \"facet\" getting plot using faceting ggplot2 \"list\" getting list plots. diff.sort order sorting genotypes plotting. Either \"ascending\", \"descending\" \"none\". segment logical. TRUE, dumbell segment plotted. Default TRUE. segment.size size dumbell segment. segment.colour colour dumbell segment. segment.alpha Alpha transparency dumbell segment. point.size size points. point.alpha Alpha transparency points. error.bar logical. TRUE, error bars depicting standard errors plotted. Default TRUE. error.bar.width width error bars. ncol Number columns subset = \"facet\". nrow Number rows subset = \"facet\".","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_dumbell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Group-wise Dumbell Plots — groupwise_dumbell","text":"group-wise dumbell plot ggplot2 plot grob   list ggplot2 plot grobs.","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_dumbell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Group-wise Dumbell Plots — groupwise_dumbell","text":"","code":"library(agridat) library(ggplot2) library(patchwork)  soydata <- australia.soybean # soydata[soydata$loc == \"Nambour\", ]$lodging <- NA  checks <- c(\"G01\", \"G05\")  checkdata <- soydata[soydata$gen %in% checks, ]  clrs <- c(\"#B2182B\", \"#2166AC\", \"#009E53\", \"#E69F00\") clrs_dark <- colorspace::darken(clrs, amount = 0.2)  # Group-wise dumbell plot with error bar outg_dumbell1 <-   groupwise_dumbell(data = checkdata, group = \"loc\",                     trait = \"lodging\", genotype = \"gen\",                     subset = \"none\", diff.sort = \"descending\") outg_dumbell1   outg_dumbell1 +   scale_colour_manual(values = clrs)   # Group-wise dumbell plot without error bar outg_dumbell2 <-   groupwise_dumbell(data = checkdata, group = \"loc\",                     trait = \"lodging\", genotype = \"gen\",                     subset = \"none\", diff.sort = \"descending\",                     error.bar = FALSE) outg_dumbell2   outg_dumbell2 +   scale_colour_manual(values = clrs)   # Group-wise points with error bar as facets outg_facet <-   groupwise_dumbell(data = checkdata, group = \"loc\",                     trait = \"lodging\", genotype = \"gen\",                     subset = \"facet\") outg_facet   outg_facet +   scale_colour_manual(values = clrs)   # Group-wise points with error bar as list outg_list <-   groupwise_dumbell(data = checkdata, group = \"loc\",                     trait = \"lodging\", genotype = \"gen\",                     subset = \"list\")  wrap_plots(outg_list, nrow = 2, guides = \"collect\")   outg_list <-   lapply(seq_along(outg_list), function(i) {     outg_list[[i]] +       scale_colour_manual(values = clrs[i])   }) #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  wrap_plots(outg_list, nrow = 2, guides = \"collect\")"},{"path":"https://aravind-j.github.io/avial/reference/groupwise_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Group-wise Histograms — groupwise_histogram","title":"Plot Group-wise Histograms — groupwise_histogram","text":"Plot Group-wise Histograms","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Group-wise Histograms — groupwise_histogram","text":"","code":"groupwise_histogram(   data,   group,   trait,   background.hist = TRUE,   background.hist.alpha = 0.25,   background.density = TRUE,   background.density.alpha = 0.1,   hist = TRUE,   hist.border = TRUE,   hist.position = c(\"identity\", \"stack\"),   hist.alpha = 0.8,   bw.adjust = 0.5,   density = TRUE,   density.alpha = 0.1,   normal.curve = TRUE,   normal.curve.linetype = \"solid\",   highlight.mean = TRUE,   show.counts = TRUE,   count.text.size = 3,   subset = c(\"facet\", \"list\", \"none\"),   ncol = NULL,   nrow = NULL )"},{"path":"https://aravind-j.github.io/avial/reference/groupwise_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Group-wise Histograms — groupwise_histogram","text":"data data data frame object. data frame possess columns specifying group trait. group Name column specifying group character string. trait Name column specifying trait character string. background.hist logical. TRUE, background data histogram plotted. Default TRUE. background.hist.alpha Alpha transparency background data histogram. background.density logical. TRUE, background data kernel density plotted. Default TRUE. background.density.alpha Alpha transparency background data kernel density. hist logical. TRUE, group-wise histogram plotted. Default TRUE. hist.border logical. TRUE, histogram border also plotted. Default TRUE. hist.position Histogram position adjustment. Either \"identity\" \"stack\". hist.alpha Alpha transparency group-wise histogram. bw.adjust Multiplicative bin width adjustment. Default 0.5 means use half default bandwidth. density logical. TRUE, group-wise kernel density plotted. Default TRUE. density.alpha Alpha transparency group-wise kernel density normal.curve logical. TRUE, normal curve plotted. Default TRUE. normal.curve.linetype Linetype normal curve. See aes_linetype_size_shape. highlight.mean logical. TRUE, mean value highlighted vertical line. Default TRUE. show.counts logical. TRUE, group wise counts plotted text annotation. Default TRUE. count.text.size size count text annotation. subset method subsetting plots according argument \"group\". Either \"facet\" getting plot using faceting ggplot2 \"list\" getting list plots. ncol Number columns subset = \"facet\". nrow Number rows subset = \"facet\".","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Group-wise Histograms — groupwise_histogram","text":"group-wise histogram ggplot2 plot grob list   ggplot2 plot grobs.","code":""},{"path":"https://aravind-j.github.io/avial/reference/groupwise_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Group-wise Histograms — groupwise_histogram","text":"","code":"library(agridat) library(ggplot2) library(patchwork)  soydata <- australia.soybean # soydata[soydata$loc == \"Nambour\", ]$lodging <- NA  clrs <- c(\"#B2182B\", \"#2166AC\", \"#009E53\", \"#E69F00\") clrs_dark <- colorspace::darken(clrs, amount = 0.2)  # Group-wise histogram ---- outg_hist <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = FALSE,                       background.density = FALSE,                       hist.alpha = 0.5,                       density = FALSE,                       subset = \"none\") outg_hist   outg_hist +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # Group-wise histogram - stacked ---- outg_hist_stack <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = FALSE,                       background.density = FALSE,                       hist.position = \"stack\",                       density = FALSE,                       normal.curve = FALSE,                       subset = \"none\") outg_hist_stack   outg_hist_stack +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # Group-wise histogram with facet ---- outg_hist_facet <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = TRUE,                       background.density = FALSE,                       hist.alpha = 0.5,                       density = FALSE,                       subset = \"facet\") outg_hist_facet   outg_hist_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # Group-wise histogram as list ---- outg_hist_list <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = TRUE,                       background.density = FALSE,                       hist.alpha = 0.5,                       density = FALSE,                       subset = \"list\")  wrap_plots(outg_hist_list, nrow = 2, guides = \"collect\")   outg_hist_list <-   lapply(seq_along(outg_hist_list), function(i) {     outg_hist_list[[i]] +       scale_fill_manual(values = clrs[i]) +       scale_colour_manual(values = clrs_dark[i])   }) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  wrap_plots(outg_hist_list, nrow = 2, guides = \"collect\")   # Group-wise density ---- outg_density <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = FALSE,                       background.density = TRUE,                       hist = FALSE,                       density = TRUE,                       normal.curve = FALSE,                       subset = \"none\") outg_density   outg_density +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # Group-wise density with facet ---- outg_density_facet <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = FALSE,                       background.density = TRUE,                       hist = FALSE,                       density = TRUE,                       normal.curve = FALSE,                       subset = \"facet\") outg_density_facet   outg_density_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # Group-wise density as list ---- outg_density_list <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = FALSE,                       background.density = TRUE,                       hist = FALSE,                       density = TRUE,                       normal.curve = FALSE,                       subset = \"list\")  wrap_plots(outg_density_list, nrow = 2, guides = \"collect\")   outg_density_list <-   lapply(seq_along(outg_density_list), function(i) {     outg_density_list[[i]] +       scale_fill_manual(values = clrs[i]) +       scale_colour_manual(values = clrs_dark[i])   }) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  wrap_plots(outg_density_list, nrow = 2, guides = \"collect\")   # Group-wise density + histogram ---- outg_density_hist <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = FALSE,                       background.density = FALSE,                       hist = TRUE,                       hist.alpha = 0.3,                       density = TRUE,                       normal.curve = FALSE,                       subset = \"none\") outg_density_hist   outg_density_hist +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # Group-wise density + histogram with facet ---- outg_density_hist_facet <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = TRUE,                       background.density = FALSE,                       hist = TRUE,                       hist.alpha = 0.3,                       density = TRUE,                       normal.curve = FALSE,                       subset = \"facet\") outg_density_hist_facet   outg_density_hist_facet +   scale_fill_manual(values = clrs) +   scale_colour_manual(values = clrs_dark) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # Group-wise density + histogram as list ---- outg_density_hist_list <-   groupwise_histogram(data = soydata, group = \"loc\", trait = \"lodging\",                       background.hist = TRUE,                       background.density = FALSE,                       hist = TRUE,                       hist.alpha = 0.3,                       density = TRUE,                       normal.curve = FALSE,                       subset = \"list\")  wrap_plots(outg_density_hist_list, nrow = 2, guides = \"collect\")   outg_density_hist_list <-   lapply(seq_along(outg_density_hist_list), function(i) {     outg_density_hist_list[[i]] +       scale_fill_manual(values = clrs[i]) +       scale_colour_manual(values = clrs_dark[i])   }) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  wrap_plots(outg_density_hist_list, nrow = 2, guides = \"collect\")"},{"path":"https://aravind-j.github.io/avial/reference/mse.bartlett.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Bartlett's Test of Homogeneity of Error Variances — mse.bartlett.test","title":"Bartlett's Test of Homogeneity of Error Variances — mse.bartlett.test","text":"Perform chi-square test homogeneity variance (Bartlett's test) test equality several error variances mean squared errors (Gomez Gomez 1984) .","code":""},{"path":"https://aravind-j.github.io/avial/reference/mse.bartlett.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bartlett's Test of Homogeneity of Error Variances — mse.bartlett.test","text":"","code":"mse.bartlett.test(mse, df)"},{"path":"https://aravind-j.github.io/avial/reference/mse.bartlett.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bartlett's Test of Homogeneity of Error Variances — mse.bartlett.test","text":"mse vector error variances mean squared errors environment (years /locations). df vector degrees freedom corresponding mse.","code":""},{"path":"https://aravind-j.github.io/avial/reference/mse.bartlett.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bartlett's Test of Homogeneity of Error Variances — mse.bartlett.test","text":"list chi-square value test statistic, corresponding   degrees freedom p value.","code":""},{"path":"https://aravind-j.github.io/avial/reference/mse.bartlett.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bartlett's Test of Homogeneity of Error Variances — mse.bartlett.test","text":"Gomez KA, Gomez AA (1984). Statistical Procedures Agricultural Research, 2nd ed edition. Wiley, New York. ISBN 978-0-471-87092-0.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/avial/reference/mse.bartlett.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bartlett's Test of Homogeneity of Error Variances — mse.bartlett.test","text":"","code":"# Examples from Page 467-471 Gomez KA and AA Gomez (1984) Statistical # Procedures for Agricultural Research. 2nd ed. Wiley, New York, 680 p.  # Different degrees of freedom mse <- c(6.73920, 1.93496, 1.15500, 10.58450) df <- c(19, 16, 17, 19)  mse.bartlett.test(mse = c(6.73920, 1.93496, 1.15500, 10.58450),                   df = c(19, 16, 17, 19)) #> $chisq.value #> [1] 24.98754 #>  #> $df #> [1] 3 #>  #> $p.value #> [1] 1.553341e-05 #>   # Same degrees of freedom mse <- c(11.459848, 17.696970, 10.106818) df <- c(20, 20, 20)  mse.bartlett.test(mse = c(11.459848, 17.696970, 10.106818),                   df = c(20, 20, 20)) #> $chisq.value #> [1] 1.814362 #>  #> $df #> [1] 2 #>  #> $p.value #> [1] 0.4036606 #>"},{"path":"https://aravind-j.github.io/avial/reference/parse_mstrat_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Output Files from MStrat — parse_mstrat_out","title":"Parse Output Files from MStrat — parse_mstrat_out","text":"Prepare raw output files generated MStrat (Schoen Brown 1993; Gouesnard et al. 2001; Gouesnard et al. 2002) .","code":""},{"path":"https://aravind-j.github.io/avial/reference/parse_mstrat_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Output Files from MStrat — parse_mstrat_out","text":"","code":"parse_mstrat_out(   data.file,   genotype = NULL,   variable.file,   kernel.file,   redundance.output = NULL,   core.output = NULL )"},{"path":"https://aravind-j.github.io/avial/reference/parse_mstrat_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Output Files from MStrat — parse_mstrat_out","text":"data.file path .dat input file used generating output files MStrat. genotype Name column/variable genotype names character string. variable.file path .var input file used generating output files MStrat. kernel.file path .ker input file used generating output files MStrat. redundance.output path redundance output file generated MStrat. core.output path core output file generated MStrat.","code":""},{"path":"https://aravind-j.github.io/avial/reference/parse_mstrat_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Output Files from MStrat — parse_mstrat_out","text":"list following components: MStrat Core   Output raw output core sets constructed MStrat. MStrat Core Optimised optimised core set output   MStrat. MStrat Redundance Output raw output   Redundance estimation MStrat MStrat Redundance   Plot list plots Redundance estimation.","code":""},{"path":"https://aravind-j.github.io/avial/reference/parse_mstrat_out.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse Output Files from MStrat — parse_mstrat_out","text":"Gouesnard B, Bataillon TM, Decoux G, Rozale C, Schoen DJ, David JL (2001). “MSTRAT: algorithm building germ plasm core collections maximizing allelic phenotypic richness.” Journal Heredity, 92(1), 93–94. Gouesnard B, Bataillon TM, Decoux G, Rozale C, Schoen DJ, David JL (2002). “MStrat Documentation 1.1.” Evolutionary genomics population management (GE\\(^{\\textrm{2}}\\)pop), Institut Amelioration Genetique et Adaptation des Plantes mediterraneennes et tropicales (agAp Institute), CIRAD, Montpellier, France. Schoen DJ, Brown AH (1993). “Conservation allelic richness wild crop relatives aided assessment genetic markers.” Proceedings National Academy Sciences, 90(22), 10623–10627.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/avial/reference/parse_mstrat_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Output Files from MStrat — parse_mstrat_out","text":"","code":"if (FALSE) { # interactive()  parse_mstrat_out(data.file = \"MStrat_input_data.dat\",                  genotype = \"Accession\",                  variable.file = \"MStrat_input_variable.var\",                  kernel.file = \"MStrat_input_kernel.ker\",                  redundance.output = \"MStrat - Redundance.out\",                  core.output = \"MStrat - Core.out\") }"},{"path":"https://aravind-j.github.io/avial/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://aravind-j.github.io/avial/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://aravind-j.github.io/avial/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://aravind-j.github.io/avial/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://aravind-j.github.io/avial/reference/prep_mstrat_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Input Files for MStrat — prep_mstrat_input","title":"Prepare Input Files for MStrat — prep_mstrat_input","text":"Prepare input files MStrat, software building germplasm core collections maximizing allelic phenotypic richness (Schoen Brown 1993; Gouesnard et al. 2001; Gouesnard et al. 2002) .","code":""},{"path":"https://aravind-j.github.io/avial/reference/prep_mstrat_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Input Files for MStrat — prep_mstrat_input","text":"","code":"prep_mstrat_input(   data,   genotype,   qualitative,   quantitative,   active,   target,   center = TRUE,   scale = TRUE,   weights.qualitative = NULL,   weights.quantitative = NULL,   nclass.quantitative = NULL,   always.selected = NULL,   file.name = \"MStrat_input\",   folder.path = getwd() )"},{"path":"https://aravind-j.github.io/avial/reference/prep_mstrat_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Input Files for MStrat — prep_mstrat_input","text":"data data data frame object. data frame possess columns genotype names multiple quantitative /qualitative trait/variable data. genotype Name column genotype names character string. qualitative Name columns qualitative traits character vector. quantitative Name columns quantitative traits character vector. active Name traits/variables declared active. target Name traits/variables declared target. center either logical value numeric-alike vector length     equal number columns x,     ‘numeric-alike’ means .numeric(.)     applied successfully .numeric(.) true. scale either logical value numeric-alike vector length     equal number columns x. weights.qualitative vector weight applied qualitative traits. NULL numeric vector length number qualitative traits. NULL, default weight 1 given. weights.quantitative vector weight applied quantitative traits. NULL numeric vector length number quantitative traits. NULL, default weight 1 given. nclass.quantitative number classes quantitative trait data divided . NULL integer vector length number quantitative traits. NULL, default 5 applied. MStat limits maximum number classes 1000. always.selected character vector names individuals genotype always selected core collection. maximum length accepted MStrat 500. file.name character string name file data saved. folder.path path folder input files saved.","code":""},{"path":"https://aravind-j.github.io/avial/reference/prep_mstrat_input.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prepare Input Files for MStrat — prep_mstrat_input","text":"Gouesnard B, Bataillon TM, Decoux G, Rozale C, Schoen DJ, David JL (2001). “MSTRAT: algorithm building germ plasm core collections maximizing allelic phenotypic richness.” Journal Heredity, 92(1), 93–94. Gouesnard B, Bataillon TM, Decoux G, Rozale C, Schoen DJ, David JL (2002). “MStrat Documentation 1.1.” Evolutionary genomics population management (GE\\(^{\\textrm{2}}\\)pop), Institut Amelioration Genetique et Adaptation des Plantes mediterraneennes et tropicales (agAp Institute), CIRAD, Montpellier, France. Schoen DJ, Brown AH (1993). “Conservation allelic richness wild crop relatives aided assessment genetic markers.” Proceedings National Academy Sciences, 90(22), 10623–10627.","code":""},{"path":"https://aravind-j.github.io/avial/reference/prep_mstrat_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Input Files for MStrat — prep_mstrat_input","text":"","code":"library(EvaluateCore) #>  #> -------------------------------------------------------------------------------- #> Welcome to EvaluateCore version 0.1.3 #>  #>  #> # To know whats new in this version type: #>   news(package='EvaluateCore') #>   for the NEWS file. #>  #> # To cite the methods in the package type: #>   citation(package='EvaluateCore') #>  #> # To suppress this message use: #>   suppressPackageStartupMessages(library(EvaluateCore)) #> --------------------------------------------------------------------------------  data(cassava_EC) data <- cassava_EC  quant <- c(\"NMSR\", \"TTRN\", \"TFWSR\", \"TTSW\", \"TTPW\", \"AVPW\",            \"ARSR\", \"SRDM\") qual <- c(\"CUAL\", \"LNGS\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",           \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\", \"PL9M\", \"STRP\", \"STRC\",           \"PSTR\")  # Prepare genotype column data$Accession <- rownames(data) rownames(data) <- NULL data$Accession <- as.factor(data$Accession)  # Convert qualitative data as factors data[, qual] <- lapply(data[, qual],                        function(x) factor(as.factor(x)))  active = c(\"LNGS\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",            \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\",            \"TTRN\", \"TFWSR\", \"TTSW\", \"TTPW\", \"AVPW\") target = c(\"NMSR\", \"TTRN\", \"ARSR\", \"SRDM\",            \"CUAL\", \"LNGS\", \"TNPR9M\",            \"PL9M\", \"STRP\", \"STRC\",            \"PSTR\")  sel <- c(\"TMe-2906\", \"TMe-3412\", \"TMe-1374\", \"TMe-768\", \"TMe-14\",          \"TMe-3284\", \"TMe-937\", \"TMe-1859\", \"TMe-3265\", \"TMe-1739\",          \"TMe-972\", \"TMe-769\", \"TMe-3243\", \"TMe-3719\", \"TMe-1095\",          \"TMe-893\", \"TMe-1262\", \"TMe-2083\", \"TMe-376\", \"TMe-3633\",          \"TMe-1738\", \"TMe-2428\", \"TMe-259\", \"TMe-3457\", \"TMe-1406\",          \"TMe-977\", \"TMe-3006\", \"TMe-925\", \"TMe-3671\", \"TMe-2779\",          \"TMe-1293\", \"TMe-268\", \"TMe-266\", \"TMe-3562\", \"TMe-801\")  prep_mstrat_input(data = data, genotype = \"Accession\",                   qualitative = qual, quantitative = quant,                   active = active, target = target,                   center = TRUE, scale = TRUE,                   weights.qualitative = NULL,                   weights.quantitative = NULL,                   nclass.quantitative = NULL, always.selected = sel,                   file.name = \"MStrat_input\",                   folder.path = tempdir()) #> The following MStrat input files created at /var/folders/g6/rgtlsw6n123b0gt5483s5_cm0000gn/T//RtmpDroAOf: #> MStrat_input_data.dat #> MStrat_input_variable.var #> MStrat_input_kernel.ker"},{"path":"https://aravind-j.github.io/avial/reference/prep_powercore_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Input Files for PowerCore — prep_powercore_input","title":"Prepare Input Files for PowerCore — prep_powercore_input","text":"Prepare input files PowerCore, program applying advanced M strategy heuristic search establishing core sets (Kim et al. 2007; Kim et al. 2007) .","code":""},{"path":"https://aravind-j.github.io/avial/reference/prep_powercore_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Input Files for PowerCore — prep_powercore_input","text":"","code":"prep_powercore_input(   data,   genotype,   qualitative,   quantitative,   center = TRUE,   scale = TRUE,   always.selected = NULL,   file.name = \"PowerCore_input\",   folder.path = getwd() )"},{"path":"https://aravind-j.github.io/avial/reference/prep_powercore_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Input Files for PowerCore — prep_powercore_input","text":"data data data frame object. data frame possess columns genotype names multiple quantitative /qualitative trait/variable data. genotype Name column genotype names character string. qualitative Name columns qualitative traits character vector. quantitative Name columns quantitative traits character vector. center either logical value numeric-alike vector length     equal number columns x,     ‘numeric-alike’ means .numeric(.)     applied successfully .numeric(.) true. scale either logical value numeric-alike vector length     equal number columns x. always.selected character vector names individuals genotype always selected core collection. maximum length accepted MStrat 500. file.name character string name file data saved. folder.path path folder input files saved.","code":""},{"path":"https://aravind-j.github.io/avial/reference/prep_powercore_input.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prepare Input Files for PowerCore — prep_powercore_input","text":"Kim K, Chung H, Cho G, Ma K, Chandrabalan D, Gwag J, Kim T, Cho E, Park Y (2007). “PowerCore: program applying advanced M strategy heuristic search establishing core sets.” Bioinformatics, 23(16), 2155–2162. Kim K, Chung H, Cho G, Ma K, Chandrabalan D, Gwag J, Kim T, Cho E, Park Y (2007). “PowerCore (v. 1.0): Program Applying Advanced M Strategy Using Heuristic Search Establishing Core Allele Mining Sets - User Manual.” Genetic Resources Division, National Institute Agricultural Biotechnology (NIAB), Rural Development Administration (RDA), R. Korea.","code":""},{"path":"https://aravind-j.github.io/avial/reference/prep_powercore_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Input Files for PowerCore — prep_powercore_input","text":"","code":"library(EvaluateCore)  data(cassava_EC) data <- cassava_EC  quant <- c(\"NMSR\", \"TTRN\", \"TFWSR\", \"TTSW\", \"TTPW\", \"AVPW\",            \"ARSR\", \"SRDM\") qual <- c(\"CUAL\", \"LNGS\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",           \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\", \"PL9M\", \"STRP\", \"STRC\",           \"PSTR\")  # Prepare genotype column data$Accession <- rownames(data) rownames(data) <- NULL data$Accession <- as.factor(data$Accession)  # Convert qualitative data as factors data[, qual] <- lapply(data[, qual],                        function(x) factor(as.factor(x)))  sel <- c(\"TMe-2906\", \"TMe-3412\", \"TMe-1374\", \"TMe-768\", \"TMe-14\",          \"TMe-3284\", \"TMe-937\", \"TMe-1859\", \"TMe-3265\", \"TMe-1739\",          \"TMe-972\", \"TMe-769\", \"TMe-3243\", \"TMe-3719\", \"TMe-1095\",          \"TMe-893\", \"TMe-1262\", \"TMe-2083\", \"TMe-376\", \"TMe-3633\",          \"TMe-1738\", \"TMe-2428\", \"TMe-259\", \"TMe-3457\", \"TMe-1406\",          \"TMe-977\", \"TMe-3006\", \"TMe-925\", \"TMe-3671\", \"TMe-2779\",          \"TMe-1293\", \"TMe-268\", \"TMe-266\", \"TMe-3562\", \"TMe-801\")  prep_powercore_input(data = data, genotype = \"Accession\",                      qualitative = qual, quantitative = quant,                      center = TRUE, scale = TRUE,                      always.selected = sel,                      file.name = \"PowerCore_input\",                      folder.path = tempdir()) #> PowerCore output file created at /var/folders/g6/rgtlsw6n123b0gt5483s5_cm0000gn/T//RtmpDroAOf/PowerCore_input.csv"},{"path":"https://aravind-j.github.io/avial/reference/remove_scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove scales from ggplot objects — remove_scales","title":"Remove scales from ggplot objects — remove_scales","text":"Useful avoiding warning Scale * already present. Adding another scale *, replace existing scale.","code":""},{"path":"https://aravind-j.github.io/avial/reference/remove_scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove scales from ggplot objects — remove_scales","text":"","code":"remove_scales(g, scales)"},{"path":"https://aravind-j.github.io/avial/reference/remove_scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove scales from ggplot objects — remove_scales","text":"g ggplot object. scales scales removed character vector.","code":""},{"path":"https://aravind-j.github.io/avial/reference/remove_scales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove scales from ggplot objects — remove_scales","text":"ggplot object without scales specified.","code":""}]
